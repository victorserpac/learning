{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,Y,GAAU,CAAE,aAAF,C;AACVC,a,GAAU,C;AACVC,Y,GAAU,oB;AAEZC,gB,GAAa,I;AACbC,W,GAAa,I;;mCAEJC,iB;AAEX,qCAAc;AAAA;;AACZ,gBAAM,IAAIC,KAAJ,CAAW,sDAAX,CAAN;AACD;;;;0CAEsB;AACrB,mBAAO,IAAIC,OAAJ,CAAa,UAAEC,OAAF,EAAWC,MAAX,EAAuB;;AAEzC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAuBX,MAAvB,EAA+BD,OAA/B,CAAlB;;AAEAS,0BAAYI,eAAZ,GAA8B,aAAK;;AAEjCT,kCAAkBU,aAAlB,CAAiCC,EAAEC,MAAF,CAASC,MAA1C;AAED,eAJD;;AAMAR,0BAAYS,SAAZ,GAAwB,aAAK;;AAE3B,oBAAK,CAAEhB,UAAP,EAAmB;AACjBA,+BAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,0BAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAuBjB,UAAvB,CAAR;AACAA,6BAAWC,KAAX,GAAmB,YAAW;AAC5B,0BAAM,IAAIE,KAAJ,CAAW,4CAAX,CAAN;AACD,mBAFD;AAGD;;AAEDE,wBAASL,UAAT;AAED,eAZD;;AAcAO,0BAAYW,OAAZ,GAAsB,aAAK;;AAEzBC,wBAAQC,GAAR,CAAaP,EAAEC,MAAF,CAASO,KAAtB;;AAEAf,uBAAQO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAvB;AAED,eAND;AAOD,aA/BM,CAAP;AAgCD;;;wCAEqBtB,U,EAAa;AACjCH,mBAAO0B,OAAP,CAAgB,iBAAS;AACvB,kBAAKvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAsCC,KAAtC,CAAL,EACE1B,WAAW2B,iBAAX,CAA8BD,KAA9B;;AAEF1B,yBAAW4B,iBAAX,CAA8BF,KAA9B,EAAqC,EAAEG,eAAe,IAAjB,EAArC;AACD,aALD;AAMD;;;4CAEwB;AACvB,gBAAK7B,UAAL,EAAkB;AAChBC;AACAD,2BAAa,IAAb;AACD;AACF","file":"ConnectionFactory.js","sourcesContent":["const stores  = [ 'negociacoes' ];\nconst version = 4;\nconst dbName  = 'learningAdvancedJS';\n\nlet connection = null;\nlet close      = null;\n\nexport class ConnectionFactory {\n\n  constructor() {\n    throw new Error( 'Não é possível criar instâncias de ConnectionFactory' );\n  }\n\n  static getConnection() {\n    return new Promise( ( resolve, reject ) => {\n\n      let openRequest = window.indexedDB.open( dbName, version );\n\n      openRequest.onupgradeneeded = e => {\n\n        ConnectionFactory._createStores( e.target.result );\n\n      };\n\n      openRequest.onsuccess = e => {\n\n        if ( ! connection ){\n          connection = e.target.result;\n          close = connection.close.bind( connection );\n          connection.close = function() {\n            throw new Error( 'Você não pode fechar diretamente a conexão' );\n          };\n        }\n\n        resolve( connection );\n\n      };\n\n      openRequest.onerror = e => {\n\n        console.log( e.target.error );\n\n        reject( e.target.error.name );\n\n      };\n    });\n  }\n\n  static _createStores( connection ) {\n    stores.forEach( store => {\n      if ( connection.objectStoreNames.contains( store ) )\n        connection.deleteObjectStore( store );\n\n      connection.createObjectStore( store, { autoIncrement: true } );\n    });\n  }\n\n  static closeConnection() {\n    if ( connection ) {\n      close();\n      connection = null;\n    }\n  }\n}\n"]}