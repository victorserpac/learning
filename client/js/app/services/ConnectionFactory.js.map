{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;AACnC,MAAMC,SAAU,CAAE,aAAF,CAAhB;AACA,MAAMC,UAAU,CAAhB;AACA,MAAMC,SAAU,oBAAhB;;AAEA,MAAIC,aAAa,IAAjB;AACA,MAAIC,QAAa,IAAjB;;AAEA;AAEE,iCAAc;AAAA;;AACZ,YAAM,IAAIC,KAAJ,CAAW,sDAAX,CAAN;AACD;;AAJH;AAAA;AAAA,sCAMyB;AACrB,eAAO,IAAIC,OAAJ,CAAa,UAAEC,OAAF,EAAWC,MAAX,EAAuB;;AAEzC,cAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAuBV,MAAvB,EAA+BD,OAA/B,CAAlB;;AAEAQ,sBAAYI,eAAZ,GAA8B,aAAK;;AAEjCd,8BAAkBe,aAAlB,CAAiCC,EAAEC,MAAF,CAASC,MAA1C;AAED,WAJD;;AAMAR,sBAAYS,SAAZ,GAAwB,aAAK;;AAE3B,gBAAK,CAAEf,UAAP,EAAmB;AACjBA,2BAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,sBAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAuBhB,UAAvB,CAAR;AACAA,yBAAWC,KAAX,GAAmB,YAAW;AAC5B,sBAAM,IAAIC,KAAJ,CAAW,4CAAX,CAAN;AACD,eAFD;AAGD;;AAEDE,oBAASJ,UAAT;AAED,WAZD;;AAcAM,sBAAYW,OAAZ,GAAsB,aAAK;;AAEzBC,oBAAQC,GAAR,CAAaP,EAAEC,MAAF,CAASO,KAAtB;;AAEAf,mBAAQO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAvB;AAED,WAND;AAOD,SA/BM,CAAP;AAgCD;AAvCH;AAAA;AAAA,oCAyCwBrB,UAzCxB,EAyCqC;AACjCH,eAAOyB,OAAP,CAAgB,iBAAS;AACvB,cAAKtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAsCC,KAAtC,CAAL,EACEzB,WAAW0B,iBAAX,CAA8BD,KAA9B;;AAEFzB,qBAAW2B,iBAAX,CAA8BF,KAA9B,EAAqC,EAAEG,eAAe,IAAjB,EAArC;AACD,SALD;AAMD;AAhDH;AAAA;AAAA,wCAkD2B;AACvB,YAAK5B,UAAL,EAAkB;AAChBC;AACAD,uBAAa,IAAb;AACD;AACF;AAvDH;;AAAA;AAAA;AA0DD,CAlEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\n  const stores  = [ 'negociacoes' ];\n  const version = 4;\n  const dbName  = 'learningAdvancedJS';\n\n  var connection = null;\n  var close      = null;\n\n  return class ConnectionFactory {\n\n    constructor() {\n      throw new Error( 'Não é possível criar instâncias de ConnectionFactory' );\n    }\n\n    static getConnection() {\n      return new Promise( ( resolve, reject ) => {\n\n        let openRequest = window.indexedDB.open( dbName, version );\n\n        openRequest.onupgradeneeded = e => {\n\n          ConnectionFactory._createStores( e.target.result );\n\n        };\n\n        openRequest.onsuccess = e => {\n\n          if ( ! connection ){\n            connection = e.target.result;\n            close = connection.close.bind( connection );\n            connection.close = function() {\n              throw new Error( 'Você não pode fechar diretamente a conexão' );\n            };\n          }\n\n          resolve( connection );\n\n        };\n\n        openRequest.onerror = e => {\n\n          console.log( e.target.error );\n\n          reject( e.target.error.name );\n\n        };\n      });\n    }\n\n    static _createStores( connection ) {\n      stores.forEach( store => {\n        if ( connection.objectStoreNames.contains( store ) )\n          connection.deleteObjectStore( store );\n\n        connection.createObjectStore( store, { autoIncrement: true } );\n      });\n    }\n\n    static closeConnection() {\n      if ( connection ) {\n        close();\n        connection = null;\n      }\n    }\n  };\n\n})();\n"]}