{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","periodos","reduce","dados","periodo","concat","catch","Error","erro","resolve","reject","get","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","console","log","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n  constructor() {\n    this._http = new HttpService();\n  }\n\n\n  obterNegociacoes() {\n    return Promise.all([\n      this.obterNegociacoesDaSemana(),\n      this.obterNegociacoesDaSemanaAnterior(),\n      this.obterNegociacoesDaSemanaRetrasada()\n    ]).then( periodos =>\n\n      periodos\n        .reduce( ( dados, periodo ) => [].concat( dados, periodo ) )\n\n    )\n    .catch( erro => {\n      throw new Error( erro );\n    });\n  }\n\n\n  obterNegociacoesDaSemana() {\n\n    return new Promise( ( resolve, reject ) => {\n\n      this._http\n        .get( 'negociacoes/semana' )\n        .then( negociacoes => {\n          resolve(\n            negociacoes.map( objeto =>\n              new Negociacao(\n                new Date( objeto.data ),\n                objeto.quantidade,\n                objeto.valor\n              )\n            )\n          );\n        })\n        .catch( erro => {\n          console.log( erro );\n          reject( 'não foi possível obter as negociações da semana' );\n        });\n    });\n  }\n\n\n  obterNegociacoesDaSemanaAnterior() {\n\n    return new Promise( ( resolve, reject ) => {\n\n      this._http\n        .get( 'negociacoes/anterior' )\n        .then( negociacoes => {\n          resolve(\n            negociacoes.map( objeto =>\n              new Negociacao(\n                new Date( objeto.data ),\n                objeto.quantidade,\n                objeto.valor\n              )\n            )\n          );\n        })\n        .catch( erro => {\n          console.log( erro );\n          reject( 'não foi possível obter as negociações da semana anterior' );\n        });\n    });\n  }\n\n\n  obterNegociacoesDaSemanaRetrasada() {\n\n    return new Promise( ( resolve, reject ) => {\n      this._http\n        .get( 'negociacoes/retrasada' )\n        .then( negociacoes => {\n          resolve(\n            negociacoes.map( objeto =>\n              new Negociacao(\n                new Date( objeto.data ),\n                objeto.quantidade,\n                objeto.valor\n              )\n            )\n          );\n        })\n        .catch( erro => {\n          console.log( erro );\n          reject( 'não foi possível obter as negociações da semana retrasada' );\n        });\n    });\n  }\n\n\n  cadastra( negociacao ) {\n    return ConnectionFactory\n      .getConnection()\n      .then( connection => new NegociacaoDao( connection ) )\n      .then( dao => dao.adiciona( negociacao ) )\n      .then( () => 'Negociação adicionada com sucesso' )\n      .catch( erro => {\n        console.log( erro );\n        throw new Error( 'Não foi possível adicionar a negociação' );\n      });\n  }\n\n\n  lista() {\n    return ConnectionFactory\n      .getConnection()\n      .then( connection => new NegociacaoDao( connection ) )\n      .then( dao => dao.listaTodos() )\n      .catch( erro => {\n        console.log( erro );\n        throw new Error( 'Não foi possível obter as negociações' );\n      });\n  }\n\n\n  apaga() {\n    return ConnectionFactory\n      .getConnection()\n      .then( connection => new NegociacaoDao( connection ) )\n      .then( dao => dao.apagaTodos() )\n      .then( () => 'Negociações apagadas com sucesso' )\n      .catch( erro => {\n        console.log( erro );\n        throw new Error( 'Não foi possível apagar as negociações' );\n      });\n  }\n\n\n  importa( listaAtual ) {\n    return this\n      .obterNegociacoes()\n      .then( negociacoes =>\n        negociacoes.filter( negociacao =>\n          ! listaAtual.some( negociacaoExistente =>\n            negociacao.isEquals( negociacaoExistente )\n          )\n        )\n      )\n      .catch( erro => {\n        console.log( erro );\n        throw new Error( 'Não foi possível buscar negociações para importar' );\n      });\n  }\n\n}\n"]}